{"version":3,"sources":["Message.js","ChatBox.js","Banner.js","UnreadMessage.js","App.js","Logout.js","index.js"],"names":["Message","props","state","myMessageHeight","otherMessageHeight","myMessage","React","createRef","otherMessage","this","interval","setInterval","current","clientHeight","setState","clearInterval","className","style","height","justify","ref","message","span","shape","size","icon","UserOutlined","Component","TextArea","Input","ChatBox","onChange","e","textValue","target","value","processSubmit","xhr","XMLHttpRequest","open","userContent","setRequestHeader","send","updateBox","username","updateMessageList","String","userTime","messages","scripts","quickReplies","dealer","WebSocket","onopen","event","console","log","prevMessageCount","length","currMessageCount","fetch","method","mode","headers","then","response","json","results","count","post_raw","forEach","post","line","substring","lastIndexOf","includes","push","propose_raw","propose","startsWith","catch","today","Date","time","formatTime","getHours","getMinutes","reverse","scrollToTheBottom","element","document","getElementById","scrollTop","scrollHeight","id","SmileOutlined","MessageOutlined","showCount","maxLength","rows","onClick","header","bordered","dataSource","renderItem","item","Item","Banner","blockIncomingUser","checked","isModelVisible","unreadMessageCount","window","setModelVisibility","menu","Divider","logout","align","offset","overlay","trigger","status","title","visible","onOk","handleOk","onCancel","handleCancel","okText","unreadUsersCount","UnreadMessage","backgroundColor","bgColor","lastMessageTime","lastMessage","Sider","Layout","Content","Header","App","unreadMessages","unreadMessageElements","currentSelected","chatBox","banner","i","changeColor","msgs","j","isRead","onMessageClicked","currentUsername","currentContent","counter","totalUnread","content","result","lastMessageUrl","replace","split","bold","rawTime","timestamp","last_message","messageElement","lastMessageDate","date","lastMessageDateTime","readStatus","sort","a","b","unreadElements","unreadMessage","bind","Logout","ReactDOM","render","path","component"],"mappings":"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","file":"static/js/main.7fe15def.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Message.css\";\r\nimport { Avatar } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { Row, Col } from 'antd';\r\n\r\nclass Message extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            myMessageHeight: \"32px\",\r\n            otherMessageHeight: \"32px\"\r\n        }\r\n        this.myMessage = React.createRef();\r\n        this.otherMessage = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => {\r\n            if(this.myMessage.current !== null && this.myMessage.current.clientHeight !== null) {\r\n                this.setState({\r\n                    myMessageHeight: this.myMessage.current.clientHeight\r\n                });\r\n            }\r\n            if(this.otherMessage.current !== null && this.otherMessage.current.clientHeight !== null) {\r\n                this.setState({\r\n                    otherMessageHeight: this.otherMessage.current.clientHeight\r\n                });\r\n            }\r\n        }, 1);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n      }\r\n\r\n    render() {\r\n        let message;\r\n        if(this.props.myMessage === true) {\r\n            message = (\r\n                <div className=\"message\" style={{height: this.state.myMessageHeight}}>\r\n                    <Row justify=\"end\">\r\n                        <div className=\"message-bubble my-message-bubble\" ref = {this.myMessage}>{this.props.message}</div>\r\n                        <Col span={1} >\r\n                            <Avatar className=\"my-avatar\" shape=\"square\" size={32} icon={<UserOutlined />} />\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        } else {\r\n            message = (\r\n                <div className=\"message\" style={{height: this.state.otherMessageHeight}}>\r\n                    <Row>\r\n                        <Col span={1}>\r\n                            <Avatar shape=\"square\" size={32} icon={<UserOutlined />} />\r\n                        </Col>\r\n                        <div className=\"message-bubble other-message-bubble\" ref = {this.otherMessage}>{this.props.message}</div>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n        return message;\r\n    }\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport Message from \"./Message\"\r\nimport \"./ChatBox.css\";\r\nimport { Row, Col } from \"antd\";\r\nimport { List } from \"antd\";\r\nimport { SmileOutlined, MessageOutlined } from \"@ant-design/icons\";\r\nimport { Input } from \"antd\";\r\nimport { Button } from \"antd\";\r\n\r\nconst { TextArea } = Input;\r\n\r\nclass ChatBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: String,\r\n            userTime: String,\r\n            userContent: String,\r\n            textValue: \"\",\r\n            messages: [],\r\n            scripts: [],\r\n            quickReplies: []\r\n        }\r\n        this.dealer = new WebSocket(\"ws://44.233.224.103:8765\");\r\n        this.dealer.onopen = function(event) {\r\n            console.log(\"WS Opened.\");\r\n        }\r\n    }\r\n\r\n\r\n    updateBox(username, userTime, userContent) {\r\n        let prevMessageCount = this.state.messages?.length;\r\n        let currMessageCount = 0;\r\n        const messages = [];\r\n        const scripts= [];\r\n        const quickReplies = [];\r\n        const userContentUrl = \"http://44.233.224.103/admin/ipname/\" + userContent + \"/get_content\";\r\n        fetch(userContentUrl, {\r\n            method: \"GET\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        }).then(response => response.json())\r\n            .then(results => {\r\n                let count = 0;\r\n                results.post_raw.forEach(post => {\r\n                    const line = post.substring(post.lastIndexOf(\":\") + 2, post.length - 1);\r\n                    if(post.includes(\"user:\") === true) {\r\n                        messages.push(<Message message={line} myMessage={false} key={`userline${count}`}/>);\r\n                    } else if(post.includes(\"us:\")  === true) {\r\n                        messages.push(<Message message={line} myMessage={true} key={`usline${count}`}/>);\r\n                    }\r\n                    count++;\r\n                });\r\n                results.propose_raw.forEach(propose => {\r\n                    if(propose.startsWith(\"0,0\")) {\r\n                        quickReplies.push(propose);\r\n                    } else {\r\n                        scripts.push(propose);\r\n                    }\r\n                })\r\n            }).catch(function (e) {\r\n                console.log(\"fetch fail\");\r\n            }).then(() => {\r\n                const today = new Date();\r\n                const time = this.formatTime(today.getHours()) + \":\" + this.formatTime(today.getMinutes());\r\n                this.setState({\r\n                    username: username,\r\n                    userTime: time,\r\n                    userContent: userContent,\r\n                    messages: messages.reverse(),\r\n                    scripts: scripts,\r\n                    quickReplies: quickReplies\r\n                });\r\n                currMessageCount = this.state.messages.length;\r\n                // Scroll to the bottom if new chatbox is loaded or received new message.\r\n                if(prevMessageCount !== currMessageCount) {\r\n                    this.scrollToTheBottom();\r\n                }\r\n            });\r\n    }\r\n\r\n    formatTime(time) {\r\n        return (time < 10 ? \"0\" : \"\") + time;\r\n    }\r\n    \r\n    scrollToTheBottom() {\r\n        var element = document.getElementById(\"message-area\");\r\n        element.scrollTop = element.scrollHeight;\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({\r\n            textValue: e.target.value\r\n        });\r\n    };\r\n\r\n    processSubmit = () => {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"post\", `http://44.233.224.103/admin/ipname/${this.state.userContent}`);\r\n        xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n        // this.dealer.send(`admin_post_message ${this.state.textValue}}`);  \r\n        xhr.send(`content=${this.state.textValue}&disable=&bt1`);\r\n        this.updateBox(this.state.username, \"\", this.state.userContent);\r\n        this.setState({\r\n            textValue: \"\"\r\n        });\r\n        this.props.updateMessageList();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chat-box\">\r\n                <Row className=\"user-information\">\r\n                    <Col span={6} className=\"username-display\">{this.state.username}</Col>\r\n                    <Col span={18} className=\"last-msg-time-display\">{this.state.username}\"s current time is {this.state.userTime}</Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={16}>\r\n                        <Row className=\"message-area border\" id=\"message-area\" >\r\n                            <Col span={24}>\r\n                                {this.state.messages}\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"tool-bar border\">\r\n                            <Col span={24}>\r\n                                <Row>\r\n                                    <Col span={24} className=\"tool-bar\">\r\n                                        <SmileOutlined />\r\n                                        <MessageOutlined />\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"reply-area border\">\r\n                            <Col span={24}>\r\n                                <TextArea showCount maxLength={200} rows={4} value={this.state.textValue} onChange={this.onChange} />\r\n                                <div className=\"buttons\">\r\n                                    <Button>End Chat</Button>\r\n                                    <Button onClick={ this.processSubmit }>Send</Button>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Row className=\"quick-reply\">\r\n                            <Col span={24}>\r\n                                <List\r\n                                    header={<div><b>Script suggestions</b></div>}\r\n                                    bordered\r\n                                    dataSource={this.state.scripts}\r\n                                    renderItem={item => (\r\n                                        <List.Item className=\"message-item\"\r\n                                            onClick={() => { this.setState({ textValue: item }) }}\r\n                                            key={item}>{item}</List.Item>\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"quick-reply\">\r\n                            <Col span={24}>\r\n                                <List\r\n                                    header={<div><b>Quick replies</b></div>}\r\n                                    bordered\r\n                                    dataSource={this.state.quickReplies}\r\n                                    renderItem={item => (\r\n                                        <List.Item className=\"message-item\"\r\n                                            onClick={() => { this.setState({ textValue: item }) }}\r\n                                            key={item}>{item}</List.Item>\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatBox;","import React from 'react';\r\nimport './Banner.css'\r\nimport { Row, Col } from 'antd';\r\nimport { Avatar } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport { Menu, Dropdown } from 'antd';\r\nimport { Checkbox } from 'antd';\r\nimport { Badge } from 'antd';\r\nimport { Modal } from 'antd';\r\n\r\nclass Banner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            blockIncomingUser: false,\r\n            isModelVisible: false\r\n        };\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({ blockIncomingUser: e.target.checked });\r\n    };\r\n\r\n\r\n    logout() {\r\n        if(this.props.unreadMessageCount === 0) {\r\n            window.open(\"/logout\", \"_self\");\r\n        } else {\r\n            this.setModelVisibility(true);\r\n        }\r\n    }\r\n\r\n    setModelVisibility(isModelVisible) {\r\n        this.setState({ isModelVisible: isModelVisible });\r\n    }\r\n\r\n    handleOk() {\r\n        this.setModelVisibility(false);\r\n        window.open(\"/logout\", \"_self\");\r\n    };\r\n    \r\n    handleCancel() {\r\n        this.setModelVisibility(false);\r\n    };\r\n\r\n    render() {\r\n        const menu = (\r\n            <Menu>\r\n                <Menu.Item key=\"0\">\r\n                    <Checkbox onChange={this.onChange}>Block incoming users</Checkbox>\r\n                </Menu.Item>\r\n                <Menu.Divider />\r\n                <Menu.Item key=\"1\">\r\n                    <p onClick={() => this.logout()}>Logout</p>\r\n                </Menu.Item>\r\n            </Menu>\r\n        )\r\n\r\n        return (\r\n            <div className=\"banner\">\r\n                <Row align=\"\">\r\n                    <Col span={4} className=\"logo-area\">\r\n                        TATA LOGO\r\n                    </Col>\r\n                    <Col span={1} offset={19} className=\"avatar-area\">\r\n                        <Dropdown overlay={menu} trigger={['click']}>\r\n                            <Badge status={this.state.blockIncomingUser === true ? \"warning\" : \"success\"}>\r\n                                <Avatar shape=\"square\" size={48} icon={<UserOutlined />} />\r\n                            </Badge>\r\n                        </Dropdown>\r\n                    </Col>\r\n                </Row>\r\n                <Modal title=\"Warning\" visible={this.state.isModelVisible} onOk={() => this.handleOk()} onCancel={() => this.handleCancel()} okText=\"Yes\">\r\n                    You have {this.props.unreadMessageCount} unread messages from {this.props.unreadUsersCount}. Logging out will automatically end your chats with all users. Confirm logging out? \r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Banner;","import React from \"react\";\r\nimport \"./UnreadMessage.css\";\r\nimport { Avatar } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport { Row, Col } from \"antd\";\r\n\r\nclass UnreadMessage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"unread-message\" onClick={this.props.onClick} style={{backgroundColor: this.props.bgColor}}>\r\n                <Row>\r\n                    <Col span={2}>\r\n                        <Avatar shape=\"square\" size={32} icon={<UserOutlined />} />\r\n                    </Col>\r\n                    <Col span={18} offset={4}>\r\n                        <Row>\r\n                            <Col span={12}><span>{this.props.username}</span></Col>\r\n                            <Col span={7} offset={5}><span>{this.props.lastMessageTime}</span></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col span={24}><span>{this.props.lastMessage}</span></Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default UnreadMessage;","import React from \"react\";\r\nimport \"./App.css\"\r\nimport ChatBox from \"./ChatBox\"\r\nimport Banner from \"./Banner\"\r\nimport UnreadMessage from \"./UnreadMessage.js\"\r\nimport { Layout } from \"antd\";\r\nimport { Row, Col } from \"antd\";\r\nconst { Sider, Content, Header } = Layout;\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            unreadMessages: [],\r\n            unreadMessageElements: [],\r\n            currentSelected: -1\r\n        };\r\n        this.chatBox = React.createRef();\r\n        this.banner = React.createRef();\r\n        setInterval(() => {\r\n            if(!this.banner.current?.state.blockIncomingUser) {\r\n                this.updateMessageList();\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateMessageList();\r\n    }\r\n\r\n    onMessageClicked(i) { \r\n        this.setState({ currentSelected: i });\r\n        this.changeColor(i);\r\n        if(this.chatBox.current !== null) {\r\n            this.chatBox.current.updateBox(this.state.unreadMessages[i].username,\r\n                this.state.unreadMessages[i].lastMessageTime,\r\n                this.state.unreadMessages[i].userContent);\r\n        }\r\n    }\r\n\r\n    changeColor(i) {\r\n        const messages = this.state.unreadMessageElements;\r\n        this.setState({\r\n            unreadMessageElements: []\r\n        });\r\n        const msgs = []\r\n        for(let j = 0; j < messages.length; ++j) {\r\n            const username = messages[j].props.username;\r\n            const lastMessageTime = messages[j].props.lastMessageTime;\r\n            const lastMessage = messages[j].props.lastMessage;\r\n            const isRead = messages[j].props.isRead;    \r\n            if(j === i) {\r\n                msgs.push(<UnreadMessage\r\n                    username={username}\r\n                    lastMessageTime={lastMessageTime}\r\n                    lastMessage= {lastMessage}\r\n                    isRead = {isRead}\r\n                    onClick={()=>this.onMessageClicked(j)}\r\n                    bgColor=\"rgb(188, 188, 188)\"/>);\r\n            } else {\r\n                msgs.push(<UnreadMessage\r\n                    username={username}\r\n                    lastMessageTime={lastMessageTime}\r\n                    lastMessage= {lastMessage}\r\n                    isRead = {isRead}\r\n                    onClick={()=>this.onMessageClicked(j)}\r\n                    bgColor=\"white\"/>);\r\n            }\r\n        }\r\n        this.setState({\r\n            unreadMessageElements: msgs\r\n        });\r\n    }\r\n\r\n    updateMessageList() {\r\n        let unreadMessages = [];\r\n        let currentUsername = \"\";\r\n        let currentContent = \"\";\r\n        let counter = 0;\r\n        let totalUnread = 0;\r\n\r\n        const unreadUserUrl = \"http://44.233.224.103/master/raw\";\r\n        fetch(unreadUserUrl, {\r\n            method: \"GET\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        }).then(response => response.json())\r\n            .then(results => {\r\n                let content = [];\r\n                // TODO: Remove this testuser\r\n                content.push(\"izuku/123\\n\");\r\n                totalUnread = results.content.length;\r\n                results.content.forEach(result => {\r\n                    let lastMessageUrl = \"http://44.233.224.103/ipname/\" + result.replace(\"\\n\", \"\") + \"/last_message\";\r\n                    fetch(lastMessageUrl, {\r\n                        method: \"GET\",\r\n                        mode: \"cors\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json; charset=utf-8\",\r\n                            \"Accept\": \"application/json\"\r\n                        }\r\n                    }).then(response => response.json())\r\n                        .then(results => {\r\n                            currentUsername = result.replace(\"\\n\", \"\").split(\"/\")[1];\r\n                            currentContent = result.replace(\"\\n\", \"\");\r\n                            // Read status\r\n                            let isRead = results.bold === 1 ? true : false;\r\n                            // Last message received time\r\n                            let rawTime = results.timestamp.split(\":\");\r\n                            let formatTime = rawTime[0] + \":\" + rawTime[1];\r\n                            // Last message\r\n                            let last_message = results.last_message;\r\n                            let message = last_message.substring(last_message.lastIndexOf(\":\") + 1, last_message.length);\r\n                            // Process message html element\r\n                            const messageElement = (<UnreadMessage\r\n                                username={currentUsername.length > 12 ? currentUsername.substring(0, 12) + \"...\" : currentUsername}\r\n                                lastMessageTime={formatTime}\r\n                                lastMessage={message?.length > 25 ? message.substring(0, 25) + \"...\" : message}\r\n                                isRead={isRead}\r\n                                onClick={() => this.onMessageClicked(counter)}\r\n                                bgColor=\"white\"\r\n                                key={`${currentUsername}_${counter}`} />);\r\n                            unreadMessages.push({\r\n                                messageElement: messageElement,\r\n                                username: currentUsername,\r\n                                userContent: currentContent,\r\n                                lastMessage: message,\r\n                                lastMessageDate: results.date,\r\n                                lastMessageTime: formatTime,\r\n                                lastMessageDateTime: results.date + \" \" + formatTime,\r\n                                readStatus: isRead\r\n                            });\r\n                            counter++;\r\n                        }).then(() => {\r\n                            // Proceed messages when all unread messages are fetched.\r\n                            if(counter === totalUnread) {\r\n                                unreadMessages = unreadMessages.sort((a,b) => {\r\n                                    if(a.lastMessageDateTime > b.lastMessageDateTime) {\r\n                                        return -1;\r\n                                    } \r\n                                    if (a.lastMessageDateTime < b.lastMessageDateTime) {\r\n                                        return 1;\r\n                                    }\r\n                                    return 0;\r\n                                });\r\n                                const unreadElements = [];\r\n                                unreadMessages.forEach(unreadMessage => unreadElements.push(unreadMessage.messageElement));\r\n                                this.setState({\r\n                                    unreadMessages: unreadMessages,\r\n                                    unreadMessageElements: unreadElements\r\n                                });\r\n                                this.onMessageClicked(this.state.currentSelected === -1 ? 0 : this.state.currentSelected);\r\n                            }\r\n                        });\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Layout>\r\n                    <Header>\r\n                        <Banner \r\n                            unreadMessageCount={this.state.unreadMessages.length}\r\n                            unreadUsersCount={this.state.unreadMessages.length}\r\n                            ref={this.banner}></Banner>\r\n                    </Header>\r\n                    <Layout>\r\n                        <Sider>\r\n                            <div className=\"message-list\">\r\n                                <Row>\r\n                                    <Col span={23} offset={1}>\r\n                                        <p>Unread msgs: {this.state.unreadMessages.length} from {this.state.unreadMessages.length} users</p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {this.state.unreadMessageElements}\r\n                            </div>\r\n                        </Sider>\r\n                        <Content>\r\n                            <ChatBox ref={this.chatBox} updateMessageList = {this.updateMessageList.bind(this)}/>\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\n\r\nclass Logout extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"logout\">\r\n                <p>You have logged out</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Logout;\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App.js\"\nimport Logout from \"./Logout\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/logout\" component={Logout} />\n      <Route path=\"/\" component={App} />\n    </Switch>\n  </BrowserRouter>, \n  document.getElementById(\"root\")\n);"],"sourceRoot":""}